// In C++, memory allocation can be categorized into **static allocation** and **dynamic allocation**. **Static allocation** occurs at compile time, where memory is assigned to variables before the program runs. This type of allocation is efficient as the memory is fixed and automatically managed by the compiler. However, it lacks flexibility since the size and lifetime of variables are predetermined. Examples include global, static, and local variables declared without `new`.

// On the other hand, **dynamic allocation** occurs at runtime using the `new` operator, which allows for flexible memory management by allocating memory from the heap. The allocated memory remains in use until it is explicitly released using the `delete` operator. This is particularly useful when the required memory size is unknown beforehand or varies during execution. However, improper memory management can lead to memory leaks if allocated memory is not freed. While **static allocation** is simpler and faster, **dynamic allocation** provides greater control and scalability at the cost of potential overhead and complexity.
